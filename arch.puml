@startuml
' !theme sketchy-outline

AI --> Character : -ai
Character --> BotManager : -available_characters
CharacterFactory ..> Character : <<creates>>
Conversation --> BotManager : -conversations
Conversation --> Thread
Conversation --> Character
Conversation --> MemoryManager
Client <|-- ClientManager : -fbchat
ClientManager --> Character
ClientManager --> Conversation
MessengerClient <|-- BotManager : -messenger
BotManager --> Main : -bot_manager

class AI {
    +get_response(): string
    +inform_prune(): float
    +__init__(): void
    -model: string
    -temperature: float
    -max_tokens: int
    -logit_bias: dict
    -presence_penalty: float
    -user: string
}

class Character {
    +__init__(ai: AI): void
    +__str__(): string
    +add_message(message: string): void
    -name: string
    -character_setting: dict
    -ai: AI
}

class MemoryManager {
    +save(): void
    +load(): void
    +manage_history(): void
    -history: list[dict]
    -memory_file: string
}

class Conversation {
    __str__()
    set_character()
    add_message()
    handle_send()
    get_participant_name()
    get_participant_nickname()
    get_participant_full_name()
        thread : Thread 
    thread_id : str 
    participants : dict[str, dict] 
    character : Character 
    memory : MemoryManager 
    auto_response
    character
    __init__(thread: Thread , thread_id: str , participants: dict[str, dict] , character: Character , memory: MemoryManager )
}

class ClientManager {
    set_conversation()
    onMessage()
    handle_send()
    send_message()
    initialize()
    run()
    shutdown()
    save_session()
    load_session()
    load_characters()
    load_character()
    fetch_participants()
    available_characters : dict[str, Character] 
    conversations : dict[str, Conversation] 
    __init__(available_characters: dict[str, Character] , conversations: dict[str, Conversation] )
}

class CharacterFactory {
    +create_character(): Character
}

class Main {
    main(): void
}
@enduml